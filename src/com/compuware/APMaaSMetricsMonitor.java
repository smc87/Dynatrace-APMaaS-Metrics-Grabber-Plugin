
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.dynatrace.com/
  * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
  **/

package com.compuware;

import java.io.File;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.util.Collection;
import java.util.Date;
import java.util.Random;
import java.util.logging.Logger;

import com.dynatrace.diagnostics.pdk.Monitor;
import com.dynatrace.diagnostics.pdk.MonitorEnvironment;
import com.dynatrace.diagnostics.pdk.MonitorMeasure;
import com.dynatrace.diagnostics.pdk.Status;
import com.gomeznetworks.webservices.ManagementInformation;
import com.gomeznetworks.webservices.ScriptData;


public class APMaaSMetricsMonitor implements Monitor {

	private static final Logger log = Logger.getLogger(APMaaSMetricsMonitor.class.getName());

	// measure constants
	private static final String METRIC_GROUP = "Script Metrics";
	private static final String MSR_AVAILABILITY = "availability";
	private static final String MSR_RESPONSE_TIME = "responseTime";

	// Extra parameters that might be useful in a later release
	public static final String gomezType = "BROWSERTX";
	public static final String gomezGroup = "ALL";
	public static final String gomezOrder = "TIME";

	// by default re-create the script every two hours
	private static final long MAX_AGE_XML_SCRIPT = 2*60*60*1000;
	
	
	//Proxy Setup
	


	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		// Not using the setup method
		return new Status(Status.StatusCode.Success);
	}
	

	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		// The plugin starts here
		
		
		boolean debug = env.getConfigBoolean("debug");
		
		//Check/create for lockfile, pause until lockfile is gone
		File lockFile = new File("connection.lock");
		Random rand = new Random();
		
		while (lockFile.exists()) {
			
			int sleepTime = 500 + rand.nextInt(1250);
			long dateDiff = new Date().getTime() - lockFile.lastModified();
			// 5*60*1000 = 5 minutes
			if (dateDiff >= 5*60*1000) {
				lockFile.delete();
				log.warning("Deleted old lockFile - 5 minutes old!");
			}
			if (debug) log.info("Connection Locked - Sleeping for " + sleepTime + " milliseconds");
			Thread.sleep(sleepTime);
		}
		lockFile.createNewFile();
		

		// Grab the values the user entered
		String scriptName = env.getConfigString("scriptName");
		String gomezUserName = env.getConfigString("gomezUserName");
		String gomezPassword = env.getConfigPassword("gomezPassword");

		
		
		//SetUP Simple Proxy
		boolean proxyOn = env.getConfigBoolean("proxyOn");
		String proxyHost = env.getConfigString("proxyHost");
		String proxyPort = env.getConfigString("proxyPort");
		String nonProxyHosts = env.getConfigString("nonProxyHosts");
		boolean proxyAuth = env.getConfigBoolean("proxyAuth");
		String proxyUsername = env.getConfigString("proxyUsername");
		String proxyPassword = env.getConfigPassword("proxyPassword");
		
		if (proxyOn) {					
		System.setProperty("http.proxyHost", proxyHost);
	    System.setProperty("http.proxyPort", proxyPort);
	    System.setProperty("https.proxyHost", proxyHost);
	    System.setProperty("https.proxyPort", proxyPort);
	    System.setProperty("http.nonProxyHosts", nonProxyHosts);
	    System.setProperty("https.nonProxyHosts", nonProxyHosts);	    
	    if (proxyAuth) {
	    final String authUser = proxyUsername;
	    final String authPassword = proxyPassword;
	    Authenticator.setDefault(
	       new Authenticator() {
	          public PasswordAuthentication getPasswordAuthentication() {
	             return new PasswordAuthentication(
	                   authUser, authPassword.toCharArray());
	          }
	       }
	    );
	    System.setProperty("http.proxyUser", authUser);
	    System.setProperty("http.proxyPassword", authPassword);
	    System.setProperty("https.proxyUser", authUser);
	    System.setProperty("https.proxyPassword", authPassword);
	    }
		}	
	

		
		//checks to see if configuration xml exists
		if (debug) log.info("Checking the collector for " + scriptName + ".xml");
		File f = new File(scriptName + ".xml");
		//if (debug && f.exists()) f.delete();
		if(! f.exists() || f.lastModified() < (System.currentTimeMillis() - MAX_AGE_XML_SCRIPT)){
			//creates the script data XML
			ManagementInformation manage = new ManagementInformation(gomezUserName, gomezPassword, scriptName, debug);

			if (! manage.createConfigXml()){
				if (debug) log.info("an error has occured");
				lockFile.delete();
				return new Status(Status.StatusCode.ErrorInternal, "An Error Occurred. Could not create XML File " + f);
			}

			if (debug) log.info("File saved!");
			if (debug) log.info("Filelocation: " + f.getAbsolutePath());
		} else {
			if (debug) log.info("No need to create a new file!");
			if (debug) log.info(f.getAbsolutePath());
	
		
		}

		//creating a script object
		ScriptData script = new ScriptData(scriptName, gomezUserName, gomezPassword, gomezGroup, gomezOrder, debug);
		if (debug) log.info("Script created correctly");
		//returns true if everything is successful
		if(script.getSummaryMetrics()){
			if (debug) log.info ("We got summary data from Gomez");
			//We got summary data back!  Now to assign the values to a measure.
			Collection<MonitorMeasure> measures;
			if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_AVAILABILITY)) != null) {
				if (debug) log.info("Processing AVAILABILITY data");
				for (MonitorMeasure measure : measures)
					measure.setValue(script.availability);
			}


			if ((measures = env.getMonitorMeasures(METRIC_GROUP, MSR_RESPONSE_TIME)) != null) {
				if (debug) log.info("Processing ResponseTime data");
				for (MonitorMeasure measure : measures)
					measure.setValue(script.responseTime);
			}
			lockFile.delete();
			return new Status(Status.StatusCode.Success);
		}
		lockFile.delete();
		return new Status(Status.StatusCode.ErrorInternal, "Possible Normal Failure - We fail when there is no new data to avoid a data point being created. Enable debug for verbose logs.");
	}

	 @Override
	public void teardown(MonitorEnvironment env) throws Exception {
		// empty
	}
}
